from datetime import datetime, timedelta

from telebot import TeleBot

from middlewares import *

bot = TeleBot("6885824087:AAGGtcnNjV8AqOwOXJaed_dxiW0zqY2JgNA")


@bot.message_handler(commands=["start"])
def start(message):
    start_message = f"–í—ñ—Ç–∞—î–º–æ {message.from_user.first_name}"
    bot.send_message(message.chat.id, start_message, reply_markup=make_main_markup())
    create_user(message.from_user.id)


@bot.message_handler(func=lambda message: message.text == "üõí–ó–∞–≥–∞–ª—å–Ω–∏–π –∫–∞—Ç–∞–ª–æ–≥")
def main_catalogue(message):
    display_item(message, 0, len(get_all_items()) - 1)


def display_item(message, start_index, end_index):
    item = get_all_items()[start_index]
    item_id, name, photo, status, arrival_date, price = item

    markup = make_item_markup(start_index, end_index, status, item_id)

    text = f"{name} - {status}\n–¶—ñ–Ω–∞: {price}$"
    if status == "Out of stock":
        text += f"\n–û—Ä—ñ—î–Ω—Ç–æ–≤–Ω–∞ –¥–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏: {arrival_date}"

    bot.send_photo(message.chat.id, get_ready_image(photo), text, reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data.startswith("order_item:"))
def order_item(call):
    item_id = int(call.data.split(":")[1])

    bot.send_message(call.message.chat.id, "–í–∏–±–µ—Ä—ñ—Ç—å –ø–æ—à—Ç–æ–≤—É —Å–∏—Å—Ç–µ–º—É —è–∫–æ—é –º–∏ –≤—ñ–¥–ø—Ä–∞–≤–∏–º–æ –≤–∞–º —Ç–æ–≤–∞—Ä: ",
                     reply_markup=make_delivery_system_markup(item_id))


@bot.callback_query_handler(func=lambda call: call.data.startswith("nowa_poshta:"))
def nowa_poshta(call):
    item_id, name, photo, _, _, price = get_item(call.data.split(":")[1])[0]
    order_info = item_id, name, get_ready_image(photo), price + 120, "–ù–æ–≤–∞ –ü–æ—à—Ç–∞"
    future_date = datetime.now().date() + timedelta(days=7)
    text = f"""
–í–∏ –æ–±—Ä–∞—Ç–∏ –¥–æ—Å—Ç–∞–≤–∫—É –ù–æ–≤–æ—é –ü–æ—à—Ç–æ—é üî¥\n
–û—Ä—ñ—î–Ω—Ç–æ–≤–Ω–∏–π —Ç–µ—Ä–º—ñ–Ω –ø—Ä–∏–±—É—Ç—Ç—è ~ {future_date}, —Ü—ñ–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ 120$\n

–ë—É–¥—å –ª–∞—Å—Ç–∫–∞ –≤–≤–µ–¥—ñ—Ç—å –≤–∞—à—ñ –¥–∞–Ω–Ω—ñ –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏\n
‚ö†Ô∏è–§–æ—Ä–º–∞—Ç –≤–≤–µ–¥–µ–Ω–Ω—è(–∑ –∫–æ–º–∞–º–∏)‚ö†Ô∏è: \n\n–Ü–º'—è –ü—Ä—ñ–∑–≤–∏—â–µ, +380********, –ú—ñ—Å—Ç–æ, –ù–æ–º–µ—Ä_–≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è\n
    """
    bot.send_message(call.message.chat.id, text)

    bot.register_next_step_handler(call.message, check_recipient_info, order_info)


@bot.callback_query_handler(func=lambda call: call.data.startswith("ukr_poshta:"))
def ukr_poshta(call):
    item_id, name, photo, _, _, price = get_item(call.data.split(":")[1])[0]
    order_info = item_id, name, get_ready_image(photo), price + 70, "–£–∫—Ä –ü–æ—à—Ç–∞"
    future_date = datetime.now().date() + timedelta(days=12)
    text = f"""
–í–∏ –æ–±—Ä–∞—Ç–∏ –¥–æ—Å—Ç–∞–≤–∫—É –£–∫—Ä –ü–æ—à—Ç–æ—é üü°\n
–û—Ä—ñ—î–Ω—Ç–æ–≤–Ω–∏–π —Ç–µ—Ä–º—ñ–Ω –ø—Ä–∏–±—É—Ç—Ç—è ~ {future_date}, —Ü—ñ–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ 70$\n
    
–ë—É–¥—å –ª–∞—Å—Ç–∫–∞ –≤–≤–µ–¥—ñ—Ç—å –≤–∞—à—ñ –¥–∞–Ω–Ω—ñ –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏\n
‚ö†Ô∏è–§–æ—Ä–º–∞—Ç –≤–≤–µ–¥–µ–Ω–Ω—è(–∑ –∫–æ–º–∞–º–∏)‚ö†Ô∏è: \n\n–Ü–º'—è –ü—Ä—ñ–∑–≤–∏—â–µ, +380********, –ú—ñ—Å—Ç–æ, –ù–æ–º–µ—Ä_–≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è\n
    """
    bot.send_message(call.message.chat.id, text)

    bot.register_next_step_handler(call.message, check_recipient_info, order_info)


def check_recipient_info(message, order_info):
    recipient_info_list = message.text.split(",")
    item_id, name, photo, price, selected_delivery_system = order_info
    if (len(recipient_info_list) != 4
            or len(recipient_info_list[0].split(" ")) != 2
            or not recipient_info_list[1].strip(" ").startswith("+380")
            or not recipient_info_list[3].strip(" ").isdigit()):
        bot.send_message(message.chat.id, "ü§®–ù–µ–≤—ñ—Ä–Ω–æ –≤–≤–µ–¥–µ–Ω—ñ –¥–∞–Ω–Ω—ñ, –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ—Å—Ç—å –¥–∞–Ω–Ω–∏—Ö —Ç–∞ –∑–∞–º–æ–≤—Ç–µ —Ç–æ–≤–∞—Ä –∑–Ω–æ–≤—É")
    else:
        text = f"""
        –ß—É–¥–æ–≤–æ, –í–∞—à–µ –∑–∞–º–æ–ª–µ–Ω–Ω—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–µ —Ç–∞ —á–µ–∫–∞—î —Ä–æ–∑–≥–ª—è–¥—É, –í–∏ –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å –∑–∞–º–æ–ª–µ–Ω–Ω—è –Ω–∞–∂–∞–≤—à–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—É –∫–Ω–æ–ø–∫—É ‚¨áÔ∏è\n\n
        
{name}\n
–í–∏–±—Ä–∞–Ω–∏–π –ø–æ—à—Ç–æ–≤–∏–π —Å–µ—Ä–≤—ñ—Å: {selected_delivery_system}\n\n
–î–æ —Å–ø–ª–∞—Ç–∏: {price}$\n
        """
        bot.send_photo(message.chat.id, photo, text)

        if selected_delivery_system == "–ù–æ–≤–∞ –ü–æ—à—Ç–∞":
            estimated_arrival_date = datetime.now().date() + timedelta(days=7)
        else:
            estimated_arrival_date = datetime.now().date() + timedelta(days=7)

        add_order_to_user_orders(message.from_user.id, item_id, selected_delivery_system, estimated_arrival_date,
                                 "–û–±—Ä–æ–±–∫–∞", message.text)


@bot.callback_query_handler(func=lambda call: call.data == "promo_code")
def promo_code(call):
    bot.send_message(call.message.chat.id, "In development")


@bot.callback_query_handler(func=lambda call: call.data == "get_setka")
def get_setka(call):
    bot.send_photo(call.message.chat.id, get_ready_image("setka.jpg"))
    bot.send_photo(call.message.chat.id, get_ready_image("setka1.jpg"))


@bot.callback_query_handler(func=lambda call: call.data.startswith("previous_item:"))
def previous_item(call):
    bot.delete_message(call.message.chat.id, call.message.message_id)
    data = call.data.split(":")
    if int(data[1]) == 0:
        start_index = int(data[2])
        display_item(call.message, start_index, int(data[2]))
    else:
        start_index = int(data[1]) - 1
        display_item(call.message, start_index, int(data[2]))


@bot.callback_query_handler(func=lambda call: call.data.startswith("next_item:"))
def next_item(call):
    bot.delete_message(call.message.chat.id, call.message.message_id)
    data = call.data.split(":")
    if int(data[1]) == int(data[2]):
        start_index = 0
        display_item(call.message, start_index, int(data[2]))
    else:
        start_index = int(data[1]) + 1
        display_item(call.message, start_index, int(data[2]))


@bot.message_handler(func=lambda message: message.text == "üìç–ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä—ñ–≤ –≤ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ")
def in_stock_catalogue(message):
    display_in_stock_item(message, 0, len(get_in_stock_items()) - 1)


def display_in_stock_item(message, start_index, end_index):
    item = get_in_stock_items()[start_index]
    item_id, name, photo, _, _, price = item

    markup = make_in_stock_item_markup(start_index, end_index, item_id)

    text = f"{name}\n–¶—ñ–Ω–∞: {price}$"

    bot.send_photo(message.chat.id, get_ready_image(photo), text, reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data.startswith("previous_in_stock_item:"))
def previous_in_stock_item(call):
    bot.delete_message(call.message.chat.id, call.message.message_id)
    data = call.data.split(":")
    if int(data[1]) == 0:
        start_index = int(data[2])
        display_in_stock_item(call.message, start_index, int(data[2]))
    else:
        start_index = int(data[1]) - 1
        display_in_stock_item(call.message, start_index, int(data[2]))


@bot.callback_query_handler(func=lambda call: call.data.startswith("next_in_stock_item:"))
def next_in_stock_item(call):
    bot.delete_message(call.message.chat.id, call.message.message_id)
    data = call.data.split(":")
    if int(data[1]) == int(data[2]):
        start_index = 0
        display_in_stock_item(call.message, start_index, int(data[2]))
    else:
        start_index = int(data[1]) + 1
        display_in_stock_item(call.message, start_index, int(data[2]))


@bot.message_handler(func=lambda message: message.text == "üÜò–ó–≤—è–∑–∞—Ç–∏—Å—å –∑ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º")
def contact_the_manager(message):
    text = """
–í–∏–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é —è–∫–æ—é –º–∏ –∑–º–æ–∂–µ–º–æ –∑ –í–∞–º–∏ –∑–≤'—è–∑–∞—Ç–∏—Å—å üìû\n\n
‚ö†Ô∏è–ó–≤–µ—Ä–Ω—ñ—Ç—å —É–≤–∞–≥—É, –ø—Ä–∏ –≤–∏–±–æ—Ä—ñ –æ–ø—Ü—ñ—ó‚ö†Ô∏è:\n 
–ó–≤'—è–∑–∞—Ç–∏—Å—å –ø–æ –Ω—ñ–∫–Ω–µ–π–º—É Telegram —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥—É: @–≤–∞—à_–Ω—ñ–∫–Ω–µ–π–º\n
–ó–≤'—è–∑–∞—Ç–∏—Å—å –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω—É —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥—É: +380********
        """
    bot.send_message(message.chat.id, text, reply_markup=make_contact_the_manager_markup())


@bot.callback_query_handler(func=lambda call: call.data == "contact_by_the_nick_name")
def contact_by_the_nick_name(call):
    text = "‚ö†Ô∏è–í–≤–µ–¥—ñ—Ç—å —Å–≤—ñ–π –Ω—ñ–∫–Ω–µ–π–º –≤ Telegram, –∑–≤–µ—Ä–Ω—ñ—Ç—å —É–≤–∞–≥—É, —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥—É: @–≤–∞—à_–Ω—ñ–∫–Ω–µ–π–º‚ö†Ô∏è"

    bot.send_message(call.message.chat.id, text)

    bot.register_next_step_handler(call.message, check_nick_name)


def check_nick_name(message):
    if message.text.startswith("@"):
        bot.send_message(message.chat.id, "–î—è–∫—É—î–º–æ ‚ù§Ô∏è, –º–∏ –∑–≤—è–∂–µ–º–æ—Å—å –∑ –í–∞–º–∏ –æ—Ä—ñ—î–Ω—Ç–æ–≤–Ω–æ –∑–∞ 15 —Ö–≤–∏–ª–∏–Ω)")
    else:
        bot.send_message(message.chat.id, "ü§®–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –Ω—ñ–∫–Ω–µ–π–º—É, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É")


@bot.callback_query_handler(func=lambda call: call.data == "contact_by_the_phone_number")
def contact_by_the_phone_number_name(call):
    text = "‚ö†Ô∏è–í–≤–µ–¥—ñ—Ç—å —Å–≤—ñ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É, –∑–≤–µ—Ä–Ω—ñ—Ç—å —É–≤–∞–≥—É —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥—É: +380********‚ö†Ô∏è"

    bot.send_message(call.message.chat.id, text)

    bot.register_next_step_handler(call.message, check_phone_number)


def check_phone_number(message):
    if message.text.startswith("+380") and len(message.text) == 13:
        bot.send_message(message.chat.id, "–î—è–∫—É—î–º–æ ‚ù§Ô∏è, –º–∏ –∑–≤—è–∂–µ–º–æ—Å—å –∑ –≤–∞–º–∏ –æ—Ä—ñ—î–Ω—Ç–æ–≤–Ω–æ –∑–∞ 15 —Ö–≤–∏–ª–∏–Ω)")
    else:
        bot.send_message(message.chat.id, "ü§®–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω—É, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É")


@bot.message_handler(func=lambda message: message.text == "üì¶–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è")
def check_order_status(message):
    user_orders = get_user_orders(message.from_user.id)
    for order in user_orders:
        _, _, item_id, selected_delivery_system, estimated_arrival_date, status, user_info = order
        _, name, photo, _, _, _ = get_item(item_id)[0]
        text = f"""
–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è: {name}\n
–í–∏–±—Ä–∞–Ω–∞ –ø–æ—à—Ç–æ–≤–∞ —Å–∏—Å—Ç–µ–º–∞: {selected_delivery_system}\n
–°—Ç–∞—Ç—É—Å: {status}, –æ—Ä—ñ—î–Ω—Ç–æ–≤–Ω–∞ –¥–∞—Ç–∞ –ø—Ä–∏–±—É—Ç—Ç—è: {estimated_arrival_date}\n
–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –∑–∞–º–æ–≤–Ω–∏–∫–∞: {user_info}
        """
        bot.send_photo(message.chat.id, get_ready_image(photo), text)


if __name__ == "__main__":
    bot.polling(none_stop=True)
